steps:

  # Read properties file into environment variables
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -o allexport
        source build.properties
        set +o allexport
    env:
      - 'CLOUDSDK_CORE_DISABLE_PROMPTS=1'

  # Build Container 2 image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${IMAGE1}', './Container1']

  # Push Container 1 image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${IMAGE1}']
  
  # Build Container 2 image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', '${IMAGE2}', './Container2']
  
  # Push Container 2 image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${IMAGE2}']

    # Fetch Kubernetes cluster credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - '${GKE_CLUSTER_NAME}'
      - '--region=${REGION}'
    env:
      - 'CLOUDSDK_CONTAINER_CLUSTER=${GKE_CLUSTER_NAME}'
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'

  # Deploy pv and pvc to Kubernetes cluster
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - 'deployment.yaml'
    env:
      - 'CLOUDSDK_CONTAINER_CLUSTER=${GKE_CLUSTER_NAME}'
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'

  # Deploy container 1 and corresponding service
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - './Container1/container1-deployment.yaml' 
    env:
      - 'CLOUDSDK_CONTAINER_CLUSTER=${GKE_CLUSTER_NAME}'
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'
    
    # Deploy container 2 and corresponding service
  - name: 'gcr.io/cloud-builders/kubectl'
    args:
      - 'apply'
      - '-f'
      - './Container2/container2-deployment.yaml' 
    env:
      - 'CLOUDSDK_CONTAINER_CLUSTER=${GKE_CLUSTER_NAME}'
      - 'CLOUDSDK_COMPUTE_REGION=${REGION}'

options:
  default_logs_bucket_behavior: REGIONAL_USER_OWNED_BUCKET